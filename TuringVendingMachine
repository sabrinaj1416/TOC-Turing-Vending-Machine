package main;

import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class TuringVendingMachine {
    private char[] tape;
    private int head;
    private Set<Integer> states;
    private int currentState;
    private int coinBalance;
    private Map<String, Items> items;
    private Map<Character, Integer> coins;

    public TuringVendingMachine(char[] tape, int head, int[] states, Map<Character, Integer> coins, Map<String, Items> items) {
        this.tape = tape;
        this.head = head;
        this.states = new HashSet<Integer>();
        for (int state : states) {
            this.states.add(state);
        }
        this.currentState = states[0];
        this.coinBalance = 0;
        this.coins = coins;
        this.items = items;
    }

    
	public void run(int[][] program) {
        while (states.contains(currentState)) {
            int[] instruction = program[currentState];
            int register = instruction[0];
            char symbol = (char) instruction[1];
            int nextState = instruction[2];
            int move = instruction[3];

            tape[head] = symbol;
            currentState = nextState;
            head += move;

            if (register >= 0) {
                if (move < 0) {
                    tape[head] = (char) (register % 10 + '0');
                    register /= 10;
                    head--;
                } else {
                    tape[head] = (char) (register % 10 + '0');
                    register /= 10;
                    head++;
                }
            }

            if (head < 0) {
                char[] newTape = new char[tape.length * 2];
                Arrays.fill(newTape, ' ');
                System.arraycopy(tape, 0, newTape, tape.length - head, tape.length);
                head += tape.length;
                tape = newTape;
            } else if (head >= tape.length) {
                char[] newTape = new char[tape.length * 2];
                Arrays.fill(newTape, ' ');
                System.arraycopy(tape, 0, newTape, 0, tape.length);
                tape = newTape;
            }
        }
    }

    public String processInput(String input) {
        // Check if input is valid
        if (!isValidInput(input)) {
            return "Invalid input. Please try again.";
        }

        // Parse input
        int coinTotal = parseCoins(input.substring(0, input.length() - 1));
        String itemCode = input.substring(input.length() - 1);

        // Check if item is in stock
        if (!isItemInStock(itemCode)) {
            return "Sorry, " + items.get(itemCode).getName() + " is out of stock.";
        }
		return itemCode;
    }

    private boolean isValidInput(String input) {
        // Check that the input consists of digits followed by a single letter code
        if (!input.matches("\\d+[NnKkFfSs]")) {
            return false;
        }
        
        // Check that the coin value is valid
        int coinTotal = parseCoins(input.substring(0, input.length() - 1));
        if (coinTotal <= 0 || coinTotal > coinBalance) {
            return false;
        }
        
        // Check that the item code is valid and in stock
        String itemCode = input.substring(input.length() - 1);
        return isItemInStock(itemCode);
    }

    private int parseCoins(String substring) {
        // Parse the coin value from the input string
        return Integer.parseInt(substring);
    }

    private boolean isItemInStock(String itemCode) {
        // Check if the item is in the vending machine's item inventory
        if (!items.containsKey(itemCode)) {
            return false;
        }
        
        // Check if the item is in stock
        Items item = items.get(itemCode);
        if (item.getQuantity() <= 0) {
            return false;
        }
        
        return true;
    }
    public boolean isValidInput1(String input) {
        // Check if input is null or empty
        if (input == null || input.isEmpty()) {
            return false;
        }

        // Split the input into tokens
        String[] tokens = input.split(" ");

        // Check if there are five tokens
        if (tokens.length != 5) {
            return false;
        }

        // Check if the first four tokens are valid coins
        for (int i = 0; i < 4; i++) {
            try {
                int coin = Integer.parseInt(tokens[i]);
                if (coin != 1 && coin != 2 && coin != 5 && coin != 10) {
                    return false;
                }
            } catch (NumberFormatException e) {
                return false;
            }
        }

        // Check if the last token is a valid item code
        String itemCode = tokens[4];
        if (!itemCode.equals("N") && !itemCode.equals("K") && !itemCode.equals("F") && !itemCode.equals("S")) {
            return false;
        }

        return true;
    }


    public void dispenseItem(String itemCode) {
        Items item = items.get(itemCode);
        if (item == null || item.getQuantity() == 0) {
            return;
        }
        item.setQuantity(item.getQuantity() - 1);
        coinBalance += item.getPrice();
    }


	public char[] getTape() {
        return tape;
    }

    public int getHead() {
        return head;
    }

    public Set<Integer> getStates() {
        return states;
    }

    public int getCurrentState() {
        return currentState;
    }

    public static void main(String[] args) {
        // Initialize the vending machine with a tape, initial head position, states, coins, and items
        char[] tape = new char[100];
        Arrays.fill(tape, ' ');
        int[] states = {0, 1, 2, 3, 4, 5, 6, 7, 8};
        Map<Character, Integer> coins = new HashMap<>();
        coins.put('1', 1);
        coins.put('5', 5);
        coins.put('1', 10);
        Map<String, Items> items = new HashMap<>();
        items.put("S", new Items("Soda", 75, 10));
        items.put("C", new Items("Chips", 50, 20));
        items.put("C", new Items("Candy", 35, 30));
        TuringVendingMachine vendingMachine = new TuringVendingMachine(tape, 0, states, coins, items);
        
        // Run the vending machine
        int[][] program = {
            {0, ' ', 1, 1},
            {1, '1', 1, 1},
            {1, '5', 2, 1},
            {2, '1', 3, -1},
            {2, '5', 4, -1},
            {3, '1', 3, -1},
            {3, '5', 3, -1},
            {3, 'C', 5, 1},
            {4, '1', 4, -1},
            {4, '5', 4, -1},
            {4, 'C', 6, 1},
            {5, 'C', 7, 1},
            {6, 'S', 7, 1},
            {7, ' ', 8, -1},
        };
        vendingMachine.run(program);
        
        // Output the result
        System.out.println(Arrays.toString(vendingMachine.getTape()));
    }

}
